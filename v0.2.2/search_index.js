var documenterSearchIndex = {"docs":
[{"location":"#FFTA.jl","page":"FFTA.jl","title":"FFTA.jl","text":"","category":"section"},{"location":"","page":"FFTA.jl","title":"FFTA.jl","text":"Documentation for FFTA.jl","category":"page"},{"location":"","page":"FFTA.jl","title":"FFTA.jl","text":"fft\nbfft","category":"page"},{"location":"#FFTA.fft","page":"FFTA.jl","title":"FFTA.fft","text":"Perform a fast Fourier transform of a vector. Preserves types given by the user.\n\nArguments\n\nx::AbstractVector: The vector to transform.\n\nExamples\n\njulia> x = rand(ComplexF64, 10)\n\njulia> y = fft(x)\n\n\n\n\n\nPerform a fast Fourier transform of a matrix. Preserves types given by the user.\n\nArguments\n\nx::AbstractMatrix: The matrix to transform (columnwise then rowwise).\n\nExamples\n\njulia> x = rand(ComplexF64, 10, 10)\n\njulia> y = fft(x)\n\n\n\n\n\n","category":"function"},{"location":"#FFTA.bfft","page":"FFTA.jl","title":"FFTA.bfft","text":"bfft(x::AbstractArray{T, 1}) -> Any\n\n\nPerform a backward fast Fourier transform of a vector, where \"backward\" indicates the same output signal down to a constant factor. Preserves types given by the user.\n\nArguments\n\nx::AbstractVector: The vector to transform\n\nExamples\n\njulia> x = rand(ComplexF64, 10)\n\njulia> y = bfft(x)\n\njulia> z = fft(y)\n\njulia> x ≈ z/10\ntrue\n\n\n\n\n\nPerform a backward fast Fourier transform of a matrix, where \"backward\" indicates the same output signal down to a constant factor. Preserves types given by the user.\n\nArguments\n\nx::AbstractMatrix: The matrix to transform\n\nExamples\n\njulia> x = rand(ComplexF64, 10, 10)\n\njulia> y = bfft(x)\n\njulia> z = fft(y)\n\njulia> x ≈ z/100\ntrue\n\n\n\n\n\n","category":"function"}]
}
